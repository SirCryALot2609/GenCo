using GenCo.Application.BusinessRules.RelationJoinTables;
using GenCo.Application.DTOs.Common;
using GenCo.Application.Persistence.Contracts.Common;
using GenCo.Domain.Entities;
using MediatR;

namespace GenCo.Application.Features.RelationJoinTables.Commands.SoftDeleteRelationJoinTable;

public class SoftDeleteRelationJoinTableCommandHandler(
    IGenericRepository<RelationJoinTable> repository,
    IRelationJoinTableBusinessRules businessRules,
    IUnitOfWork unitOfWork)
    : IRequestHandler<SoftDeleteRelationJoinTableCommand, BaseResponseDto<bool>>
{
    public async Task<BaseResponseDto<bool>> Handle(SoftDeleteRelationJoinTableCommand request, CancellationToken cancellationToken)
    {
        // üß© 1. ƒê·∫£m b·∫£o c√≥ th·ªÉ x√≥a
        await businessRules.EnsureCanDeleteAsync(request.Id, cancellationToken);

        // üß© 2. T√¨m entity
        var entity = await repository.GetByIdAsync(request.Id, cancellationToken: cancellationToken);
        if (entity == null)
            return BaseResponseDto<bool>.Fail("RelationJoinTable not found");

        // üß© 3. ƒê√°nh d·∫•u x√≥a m·ªÅm
        await repository.SoftDeleteAsync(entity, cancellationToken);
        entity.UpdatedAt = DateTime.UtcNow;

        // üß© 4. L∆∞u thay ƒë·ªïi
        await unitOfWork.SaveChangesAsync(cancellationToken);

        return BaseResponseDto<bool>.Ok(true, "RelationJoinTable soft deleted successfully");
    }
}
