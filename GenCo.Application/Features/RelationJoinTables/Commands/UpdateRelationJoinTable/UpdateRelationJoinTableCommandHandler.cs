using AutoMapper;
using GenCo.Application.BusinessRules.RelationJoinTables;
using GenCo.Application.DTOs.Common;
using GenCo.Application.DTOs.RelationJoinTable.Responses;
using GenCo.Application.Persistence.Contracts.Common;
using GenCo.Domain.Entities;
using MediatR;

namespace GenCo.Application.Features.RelationJoinTables.Commands.UpdateRelationJoinTable;


public class UpdateRelationJoinTableCommandHandler(
    IGenericRepository<RelationJoinTable> repository,
    IRelationJoinTableBusinessRules businessRules,
    IUnitOfWork unitOfWork,
    IMapper mapper)
    : IRequestHandler<UpdateRelationJoinTableCommand, BaseResponseDto<RelationJoinTableResponseDto>>
{
    public async Task<BaseResponseDto<RelationJoinTableResponseDto>> Handle(UpdateRelationJoinTableCommand request, CancellationToken cancellationToken)
    {
        var dto = request.Request;

        // üß© 1. Ki·ªÉm tra entity t·ªìn t·∫°i
        var entity = await repository.GetByIdAsync(dto.Id, cancellationToken: cancellationToken);
        if (entity == null)
            return BaseResponseDto<RelationJoinTableResponseDto>.Fail("RelationJoinTable not found");

        // üß© 2. Ki·ªÉm tra Relation c√≥ t·ªìn t·∫°i kh√¥ng
        await businessRules.EnsureRelationExistsAsync(dto.RelationId, cancellationToken);

        // üß© 3. Ki·ªÉm tra lo·∫°i quan h·ªá c√≥ ph·∫£i Many-to-Many kh√¥ng
        await businessRules.EnsureRelationTypeIsManyToManyAsync(dto.RelationId, cancellationToken);

        // üß© 4. ƒê·∫£m b·∫£o t√™n JoinTable kh√¥ng b·ªã tr√πng trong c√πng Relation
        await businessRules.EnsureJoinTableNameUniqueAsync(dto.RelationId, dto.JoinTableName, cancellationToken);

        // üß© 5. √Ånh x·∫° d·ªØ li·ªáu v√† ki·ªÉm tra key
        mapper.Map(dto, entity);
        businessRules.EnsureValidKeys(entity);

        // üß© 6. C·∫≠p nh·∫≠t metadata
        entity.UpdatedAt = DateTime.UtcNow;

        // üß© 7. L∆∞u thay ƒë·ªïi
        await repository.UpdateAsync(entity, cancellationToken);
        await unitOfWork.SaveChangesAsync(cancellationToken);

        var responseDto = mapper.Map<RelationJoinTableResponseDto>(entity);
        return BaseResponseDto<RelationJoinTableResponseDto>.Ok(responseDto, "RelationJoinTable updated successfully");
    }
}
